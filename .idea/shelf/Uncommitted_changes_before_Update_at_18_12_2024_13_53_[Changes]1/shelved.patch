Index: src/test/java/UserServiceTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import org.example.taskmanagementsystem.model.User;\r\nimport org.example.taskmanagementsystem.services.UserService;\r\nimport org.junit.jupiter.api.BeforeEach;\r\nimport org.junit.jupiter.api.Test;\r\nimport org.mockito.Mock;\r\n\r\nimport java.sql.Connection;\r\nimport java.sql.PreparedStatement;\r\nimport java.sql.ResultSet;\r\nimport java.sql.SQLException;\r\n\r\nimport static org.junit.jupiter.api.Assertions.*;\r\nimport static org.mockito.Mockito.*;\r\n\r\npublic class UserServiceTest {\r\n    private Connection mockConnection;\r\n    private PreparedStatement mockStatement;\r\n    private UserService userService;\r\n    @Mock\r\n    private ResultSet mockResultSet;\r\n\r\n    @BeforeEach\r\n    public void setUp() throws SQLException {\r\n        // Создаем моки\r\n        mockConnection = mock(Connection.class);\r\n        mockStatement = mock(PreparedStatement.class);\r\n        when(mockConnection.prepareStatement(anyString())).thenReturn(mockStatement);\r\n        userService = spy(new UserService());\r\n\r\n        // Настроим метод connect() для возврата mockConnection\r\n        doReturn(mockConnection).when(userService).connect();\r\n    }\r\n\r\n    @Test\r\n    public void testCreateUser() throws Exception {\r\n        // Настройка поведения существующих моков\r\n        when(mockStatement.executeUpdate()).thenReturn(1);\r\n\r\n        // Тестируемый объект\r\n        User user = new User(25, \"Test User\", \"test25@example.com\", \"password\");\r\n\r\n        // Вызываем метод для создания пользователя\r\n        userService.createUser(user);\r\n\r\n        // Проверяем корректность вызовов\r\n        verify(mockConnection).prepareStatement(\"INSERT INTO User_table (name, email, password) VALUES (?,?,?)\");\r\n        verify(mockStatement).setString(1, \"Test User\");\r\n        verify(mockStatement).setString(2, \"test25@example.com\");\r\n        verify(mockStatement).setString(3, \"password\");\r\n        verify(mockStatement).executeUpdate();\r\n    }\r\n\r\n    @Test\r\n    public void testGetUser() throws SQLException {\r\n        // Подготовка данных для теста\r\n        int userId = 1;\r\n        User expectedUser = new User(userId, \"Test User\", \"testuser@example.com\");\r\n\r\n        // Мокирование поведения ResultSet\r\n        mockResultSet = mock(ResultSet.class); // Явное создание мок-объекта\r\n\r\n        when(mockStatement.executeQuery()).thenReturn(mockResultSet);\r\n        when(mockResultSet.next()).thenReturn(true);\r\n        when(mockResultSet.getInt(\"userId\")).thenReturn(userId);\r\n        when(mockResultSet.getString(\"name\")).thenReturn(\"Test User\");\r\n        when(mockResultSet.getString(\"email\")).thenReturn(\"testuser@example.com\");\r\n\r\n        // Вызов метода\r\n        User result = userService.getUser(userId);\r\n\r\n        // Проверка, что результат соответствует ожиданиям\r\n        assertNotNull(result);\r\n        assertEquals(expectedUser.getId(), result.getId());\r\n        assertEquals(expectedUser.getName(), result.getName());\r\n        assertEquals(expectedUser.getEmail(), result.getEmail());\r\n\r\n        // Проверка корректности вызовов\r\n        verify(mockConnection).prepareStatement(\"SELECT * FROM User_table WHERE userId = ?\");\r\n        verify(mockStatement).setInt(1, userId);\r\n        verify(mockStatement).executeQuery();\r\n        verify(mockResultSet).next();\r\n    }\r\n\r\n    @Test\r\n    public void testGetUserNotFound() throws SQLException {\r\n        // Подготовка данных для теста\r\n        int userId = 1;\r\n\r\n        // Мокирование поведения ResultSet, чтобы не было данных\r\n        mockResultSet = mock(ResultSet.class); // Явное создание мок-объекта\r\n\r\n        when(mockStatement.executeQuery()).thenReturn(mockResultSet);\r\n        when(mockResultSet.next()).thenReturn(false); // Никаких данных в ResultSet\r\n\r\n        // Вызов метода\r\n        User result = userService.getUser(userId);\r\n\r\n        // Проверка, что результат null, если пользователь не найден\r\n        assertNull(result);\r\n\r\n        // Проверка корректности вызовов\r\n        verify(mockConnection).prepareStatement(\"SELECT * FROM User_table WHERE userId = ?\");\r\n        verify(mockStatement).setInt(1, userId);\r\n        verify(mockStatement).executeQuery();\r\n        verify(mockResultSet, never()).getInt(anyString());\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/java/UserServiceTest.java b/src/test/java/UserServiceTest.java
--- a/src/test/java/UserServiceTest.java	
+++ b/src/test/java/UserServiceTest.java	
@@ -30,7 +30,7 @@
         // Настроим метод connect() для возврата mockConnection
         doReturn(mockConnection).when(userService).connect();
     }
-
+//24	"Test User"	"test@example.com"	"password"
     @Test
     public void testCreateUser() throws Exception {
         // Настройка поведения существующих моков
